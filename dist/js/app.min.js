/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst write = document.getElementById('form');\r\nconst btn = document.querySelector('.column-info_button');\r\n\r\nfunction handleButtonClick(event) {\r\n    if (event.target.closest('.column-info_btn')) {\r\n        write.scrollIntoView({ block: \"center\", behavior: \"smooth\" });\r\n    }\r\n}\r\n\r\nbtn.addEventListener(\"click\", handleButtonClick);\r\n//==============================================================\r\nconst write1 = document.querySelector('.column-info');\r\nconst btn1 = document.getElementById('1');\r\n\r\nfunction handleButtonClick1() {\r\n    write1.scrollIntoView({ block: \"center\", behavior: \"smooth\" });\r\n}\r\n\r\nbtn1.addEventListener(\"click\", handleButtonClick1);\r\n//================================================================\r\nconst write2 = document.querySelector('.works__columns');\r\nconst btn2 = document.getElementById('2');\r\n\r\nfunction handleButtonClick2() {\r\n    write2.scrollIntoView({ block: \"center\", behavior: \"smooth\" });\r\n}\r\n\r\nbtn2.addEventListener(\"click\", handleButtonClick2);\r\n//==============================================================\r\nconst write3 = document.querySelector('.footer');\r\nconst btn3 = document.getElementById('3');\r\n\r\nfunction handleButtonClick3() {\r\n    write3.scrollIntoView({ block: \"center\", behavior: \"smooth\" });\r\n}\r\n\r\nbtn3.addEventListener(\"click\", handleButtonClick3);\r\n//================================================================\r\n$('.header__icon').click(function (event) {\r\n    $(this).toggleClass('active');\r\n    $('.menu-header__nav').toggleClass('active');\r\n    if ($(this).hasClass('active')) {\r\n        $('body').data('scroll', $(window).scrollTop());\r\n    }\r\n    $('body').toggleClass('lock');\r\n    if (!$(this).hasClass('active')) {\r\n        $('body,html').scrollTop(parseInt($('body').data('scroll')));\r\n    }\r\n});\r\n//End(нужно усовершенствовать)===============================================================\r\n\r\n\r\n//Находим и объявляем все объекты, которые будут поддаваться анимации\r\nconst animItems = document.querySelectorAll('._anim-items');\r\n//Проверяем, существуют ли такие классы\r\n//Поскольку это массив, то мы проверяем его длину\r\nif (animItems.length > 0) {\r\n    //Создаём событие, при котором функция будет выполняться\r\n    window.addEventListener('scroll', animOnScroll)\r\n    //Создаём функцию\r\n    function animOnScroll(parameters) {\r\n        //Используем for, для того, что бы это везде работало\r\n        for (let index = 0; index < animItems.length; index++) {\r\n            //Получаем в переменную animItem (наш объект) каждый из элементов массива\r\n            const animItem = animItems[index];\r\n            //Создаём переменную для получения высоты объекта\r\n            const animItemHeight = animItem.offsetHeight;\r\n            //Создаём переменную для получения позиции объекта относительно верха\r\n            //(насколько объект находиться ниже, чем верх страницы)\r\n            const animItemOffset = offset(animItem).top;\r\n            //Коэффициент, регулирующий момент старта анимации\r\n            const animStart = 4;\r\n\r\n            //Настройки момента старта анимации\r\n            //window.innerHeight - Получаем высоту окна браузера\r\n            //Отнимаем высоту объекта, который анимируется, делённую на коэффициент\r\n            let animItemPoint = window.innerHeight - animItemHeight / animStart;\r\n\r\n            //Если высота объект выше (по высоте) окна браузера\r\n            if (animItemHeight > window.innerHeight) {\r\n                //Отнимаем высоту окна браузера делённую на коэффициент\r\n                animItemPoint = window.innerHeight - window.innerHeight / animStart;\r\n            }\r\n            //Если прокрутили больше, чем позиция объекта минус точка старта,\r\n            //но прокрутили меньше, чем позиция объекта плюс его высота\r\n            if ((scrollY > animItemOffset - animItemPoint) && scrollY < (animItemOffset + animItemHeight)) {\r\n                //Добавляем объекту класс active при выполнении условия\r\n                animItem.classList.add('_active');\r\n                // } else {\r\n                //     //Отбераем у объекта класс active, если условие не выполняется\r\n                //     animItem.classList.remove('_active');\r\n            }\r\n        }\r\n    }\r\n    //Позволяет корректно и кросбраузерно получать значение позиции объекта\r\n    function offset(el) {\r\n        const rect = el.getBoundingClientRect(),\r\n            scrollLeft = window.scrollX || document.documentElement.scrollLeft,\r\n            scrollTop = window.scrollY || document.documentElement.scrollTop;\r\n        return { top: rect.top + scrollTop, left: rect.left + scrollLeft }\r\n    }\r\n\r\n    //Устанавливаем общую (для всех функций) задержку\r\n    setTimeout(() => {\r\n        //Вызываем функцию, что бы она появлялась при старте страницы,\r\n        //а не только когда начинаешь скроллить\r\n        animOnScroll();\r\n    }, 300);\r\n\r\n}\n\n//# sourceURL=webpack://gulp/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;